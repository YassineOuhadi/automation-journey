#!/bin/bash
set -euo pipefail

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
RESET='\033[0m'

logo() {
  echo -e "${CYAN}"
  cat <<'EOF'   
   ðŸ§ª Automation CLI | Multi-Tool Runner
EOF
  echo -e "${RESET}"
}

log() {
    echo -e "${GREEN}[âœ”] $1${RESET}"
}

warn() {
    echo -e "${YELLOW}[!] $1${RESET}"
}

error_exit() {
    echo -e "${RED}[âœ–] $1${RESET}" >&2
    exit 1
}

perform() {
    local command="$1"
    local framework="$2"
    local args="$3"

    local env="${PWD}/shared/env/${framework}/.env"

    if [[ -f "$env" ]]; then
        log "$command â†’ $framework using env: ${env}"
        docker-compose --env-file "$env" -f shared/docker/docker-compose.yml $args "$framework"
    else
        error_exit "Missing env file: ${env}"
    fi
}

build()  { 
    perform "ðŸ”¨ Building" "$1" "build"
}

run() {
    log "ðŸ”“ Allowing Docker to access X server"
    xhost +local:docker || warn "xhost command failed"
    perform "ðŸš€ Running" "$1" "run --rm"
}

shell()  { 
    perform "ðŸ”§ Shell access" "$1" "run --rm --entrypoint /bin/bash"
}

clean() {
    log "ðŸ§¹ Cleaning containers, volumes and images..."
    docker-compose -f shared/docker/docker-compose.yml down --rmi local --volumes --remove-orphans
}

print_usage() {
    echo -e "${CYAN}Usage:${RESET} ./bin/cli {build|run|shell|clean} <framework>"
    echo ""
    echo -e "${CYAN}Examples:${RESET}"
    echo -e "  ./bin/cli build cypress"
    echo -e "  ./bin/cli run selenium"
    echo -e "  ./bin/cli shell cypress"
    echo -e "  ./bin/cli clean"
    echo ""
}

main() {
    logo
    if [[ $# -lt 1 ]]; then
        print_usage
        exit 1
    fi

    local command="$1"
    local framework="${2:-}"

    case "$command" in
        build)
            [[ -z "$framework" ]] && error_exit "framework name required for 'build'"
            build "$framework"
            ;;
        run)
            [[ -z "$framework" ]] && error_exit "framework name required for 'run'"
            run "$framework"
            ;;
        shell)
            [[ -z "$framework" ]] && error_exit "framework name required for 'shell'"
            shell "$framework"
            ;;
        clean)
            clean
            ;;
        *)
            warn "Unknown command: $command"
            print_usage
            exit 1
            ;;
    esac
}

main "$@"